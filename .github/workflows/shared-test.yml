name: Build, Test, and Generate Code Coverage for a .NET project

on:
  workflow_call:
    inputs:
      project-name:
        description: "The name of the project"
        required: true
        type: string
      solution-path:
        description: "The solution file of the project to build and run tests"
        required: true
        type: string
      dotnet-version:
        description: "The version of .NET to use"
        required: false
        type: string
        default: "8.0.x"

jobs:
  run-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Restore NuGet Packages
        run: dotnet restore ${{ inputs.solution-path }}

      - name: Build the solution
        run: dotnet build ${{ inputs.solution-path }} --no-restore

      - name: Run unit tests and generate code coverage
        shell: bash
        run: |
          # Find test projects matching *.Tests.csproj
          find . -name "*.Tests.csproj" | while read -r testProject; do
            echo "Running tests for $testProject"
            resultsDir="TestResults-${{ inputs.project-name }}/$(basename "$testProject" .csproj)"
            coverageDir="$resultsDir/CoverageResults"
            mkdir -p "$resultsDir"
            mkdir -p "$coverageDir"

            # Execute dotnet test and capture exit code
            dotnet test "$testProject" --logger trx --results-directory "$resultsDir" --no-restore --no-build --collect:"XPlat Code Coverage" \
              /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput="$coverageDir/coverage.cobertura.xml" \
              /p:CollectCoverageResults="$coverageDir" /p:CoverletOutputFormat=opencover /p:CoverletOutput="${coverageDir}/coverage.opencover.xml" \ 
              /p:CoverletOutputFormat=json /p:CoverletOutput="${coverageDir}/coverage.json" 
            test_result=$?

            # Check for test execution errors
            if [ $test_result -ne 0 ]; then
              echo "Tests for $testProject failed."
              # Optionally log detailed test output to a file
              echo "Test output for $testProject:" >> test-output.log
              dotnet test "$testProject" >> test-output.log 2>&1
              exit 1  # Exit the workflow if any test fails
            fi 
          done

      - name: Upload all test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-${{ inputs.project-name }}
          path: TestResults-${{ inputs.project-name }}
        if: always()

      - name: Upload code coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-${{ inputs.project-name }}
          path: TestResults-${{ inputs.project-name }}/**/CoverageResults/**/*.xml
        if: always()
